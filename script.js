// Obt√©m o token atrav√©s de uma API serverless do Netlify
const fetchToken = async () => {
  try {
    // Busca o token de uma fun√ß√£o serverless configurada no Netlify
    const response = await fetch('/.netlify/functions/get-token');
    if (!response.ok) {
      throw new Error('Erro ao obter o token. Verifique a configura√ß√£o do Netlify.');
    }
    const data = await response.json();
    return data.token;
  } catch (error) {
    console.error(error.message);
    return null;
  }
};

// Fun√ß√£o para buscar reposit√≥rios no GitHub
document.getElementById("searchBtn").addEventListener("click", async () => {
  const username = document.getElementById("username").value.trim();
  const repoList = document.getElementById("repoList");

  // Limpa a lista de reposit√≥rios
  repoList.innerHTML = "";

  if (!username) {
    repoList.innerHTML = `<p class="error">Por favor, insira um nome de usu√°rio do GitHub.</p>`;
    return;
  }

  try {
    // Obt√©m o token de forma segura
    const GITHUB_TOKEN = await fetchToken();

    if (!GITHUB_TOKEN) {
      repoList.innerHTML = `<p class="error">Erro ao obter o token de autentica√ß√£o.</p>`;
      return;
    }

    // Faz a requisi√ß√£o √† API do GitHub com o token
    const response = await fetch(
      `https://api.github.com/users/${username}/repos?per_page=100&sort=created&direction=desc`,
      {
        headers: { Authorization: `Bearer ${GITHUB_TOKEN}` },
      }
    );

    if (!response.ok) {
      if (response.status === 403) {
        throw new Error("Limite de requisi√ß√µes excedido. Tente novamente mais tarde.");
      } else if (response.status === 404) {
        throw new Error("Usu√°rio n√£o encontrado.");
      } else {
        throw new Error("Ocorreu um erro ao buscar os dados.");
      }
    }

    const repositories = await response.json();

    if (repositories.length === 0) {
      repoList.innerHTML = `<p class="error">Este usu√°rio n√£o possui reposit√≥rios p√∫blicos.</p>`;
      return;
    }

    // Exibe os reposit√≥rios
    repositories.forEach((repo) => {
      const repoElement = document.createElement("div");
      repoElement.classList.add("repo");

      repoElement.innerHTML = `
        <h3><a href="${repo.html_url}" target="_blank">${repo.name}</a></h3>
        <p>${repo.description || "Sem descri√ß√£o dispon√≠vel."}</p>
        <p><strong>üåü Estrelas:</strong> ${repo.stargazers_count}</p>
        <p><strong>üç¥ Forks:</strong> ${repo.forks_count}</p>
        <p><strong>üìÖ Criado em:</strong> ${new Date(repo.created_at).toLocaleDateString()}</p>
        <p><strong>üîÑ √öltima atualiza√ß√£o:</strong> ${new Date(repo.updated_at).toLocaleDateString()}</p>
      `;

      repoList.appendChild(repoElement);
    });
  } catch (error) {
    // Trata erros e exibe uma mensagem para o usu√°rio
    repoList.innerHTML = `<p class="error">${error.message}</p>`;
  }
});
